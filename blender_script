import bpy
import math

class layer():
    def __init__(self, location=(0,0), dimension=(4,4), layer_no=1, type="input"):
        x, y = location
        width, height = dimension
        if type == "input" or type == "output":
            row = 0
            for k in range(height * 2, 0, -2):
                row += 1
                column = 0
                for i in range(x, x + width * 2, 2):
                    column += 1
                    bpy.ops.mesh.primitive_cube_add(location=(i, y, k), radius=0.5)
                    bpy.context.object.name = "layer_" + str(layer_no) + "_cube_" + str(column + (row - 1) * width)
        if type == "hidden":
            row = 0
            for k in range(height * 2, 0, -2):
                row += 1
                column = 0
                for i in range(x, x + width * 2, 2):
                    column += 1
                    bpy.ops.mesh.primitive_uv_sphere_add(location=(i, y, k), size=0.2)
                    bpy.context.object.name = "layer_" + str(layer_no) + "_cube_" + str(column + (row - 1) * width)
        
    def connect_neurons(self,neuron1, neuron2):
        def __connect_points(v1, v2):
            midpoint = [(1 / 2) * (v1[0] + v2[0]), (1 / 2) * (v1[1] + v2[1]), (1 / 2) * (v1[2] + v2[2])]
            distance = math.sqrt((v2[0] - v1[0]) ** 2 + (v2[1] - v1[1]) ** 2 + (v2[2] - v1[2]) ** 2)
            z_rotation = math.atan((v2[1] - v1[1]) / ((v2[0] - v1[0]) + 0.00001))
            y_rotation = -math.atan((v2[2] - v1[2]) / math.sqrt((v2[1] - v1[1]) ** 2 + (v2[0] - v1[0]) ** 2))
            bpy.ops.curve.primitive_bezier_curve_add(location=midpoint, radius=distance / 2,                                                 rotation=[0, y_rotation, z_rotation])
        point_1 = list(bpy.data.objects[neuron1].location)
        point_2 = list(bpy.data.objects[neuron2].location)
        __connect_points(point_1, point_2)


layer_1= layer(location = (0,0), dimension=(4, 4), layer_no = 1, type="input")
layer_2= layer(location = (6, 6), dimension=(4, 4), layer_no = 2, type="hidden")

for i in range(1, 17):
    for j in range(1, 17):
        layer_1.connect_neurons('layer_1_cube_' + str(i), 'layer_2_cube_' + str(j))

